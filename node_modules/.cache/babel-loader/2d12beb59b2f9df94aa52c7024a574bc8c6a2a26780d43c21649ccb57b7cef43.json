{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\n// import finalData from \"../../dataFinal.json\"\n\n// fetch\nconst allRestaurants = async () => {\n  const data = await axios.get('http://localhost8000/restaurants');\n  console.log(data);\n};\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: finalData.restaurants,\n    chefOfTheWeek: finalData.chefOfTheWeek\n  },\n  reducers: {\n    filterRestaurants: (state, action) => {\n      const filterType = action.payload;\n      switch (filterType) {\n        case \"all\":\n          state.value = finalData.restaurants;\n          break;\n        case \"new\":\n          state.value = finalData.restaurants;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n          break;\n        case \"most popular\":\n          state.value = finalData.restaurants;\n          state.value = state.value.filter(restaurant => restaurant.isPopular === true);\n          break;\n        case \"open now\":\n          let timeNow = new Date();\n          const currentHour = timeNow.getHours();\n          state.value = finalData.restaurants;\n          state.value = state.value.filter(restaurant => restaurant.openHour <= currentHour && restaurant.closeHour > currentHour);\n          break;\n        case \"chef of the week\":\n          state.value = finalData.restaurants;\n          state.value = state.value.filter(restaurant => restaurant.chefID == state.chefOfTheWeek);\n          break;\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  filterRestaurants\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","axios","allRestaurants","data","get","console","log","restaurantsSlice","name","initialState","value","finalData","restaurants","chefOfTheWeek","reducers","filterRestaurants","state","action","filterType","payload","filter","restaurant","isNew","isPopular","timeNow","Date","currentHour","getHours","openHour","closeHour","chefID","actions","reducer"],"sources":["/Users/matar.jacob/Desktop/FullStack Moveo Course/epicure/epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\n// import finalData from \"../../dataFinal.json\"\n\n// fetch\nconst allRestaurants = async () => {\n    const data = await axios.get('http://localhost8000/restaurants')\n    console.log(data);\n}\n\nexport const restaurantsSlice = createSlice({\n    name: \"restaurants\",\n    initialState: {\n        value: finalData.restaurants,\n        chefOfTheWeek: finalData.chefOfTheWeek\n    },\n    reducers: {\n        filterRestaurants: (state, action) => {\n            const filterType = action.payload;\n            switch (filterType) {\n                case \"all\":\n                    state.value = finalData.restaurants;\n                    break;\n                case \"new\":\n                    state.value = finalData.restaurants;\n                    state.value = state.value.filter(\n                        (restaurant) => restaurant.isNew === true\n                    );\n                    break;\n                case \"most popular\":\n                    state.value = finalData.restaurants;\n                    state.value = state.value.filter(\n                        (restaurant) => restaurant.isPopular === true\n                    );\n                    break;\n                case \"open now\":\n                    let timeNow: Date = new Date;\n                    const currentHour = timeNow.getHours();\n                    state.value = finalData.restaurants;\n                    state.value = state.value.filter(\n                        (restaurant) => restaurant.openHour <= currentHour && restaurant.closeHour > currentHour\n                    );\n                    break;\n                case \"chef of the week\":\n                    state.value = finalData.restaurants;\n                    state.value = state.value.filter(\n                        (restaurant) => restaurant.chefID == state.chefOfTheWeek\n                    );\n                    break;\n                default:\n                    state.value = state.value;\n            }\n        }\n\n    }\n});\n\nexport const { filterRestaurants } = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB;;AAEA;AACA,MAAMC,cAAc,GAAG,YAAY;EAC/B,MAAMC,IAAI,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,kCAAkC,CAAC;EAChEC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;AACrB,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGP,WAAW,CAAC;EACxCQ,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACVC,KAAK,EAAEC,SAAS,CAACC,WAAW;IAC5BC,aAAa,EAAEF,SAAS,CAACE;EAC7B,CAAC;EACDC,QAAQ,EAAE;IACNC,iBAAiB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClC,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MACjC,QAAQD,UAAU;QACd,KAAK,KAAK;UACNF,KAAK,CAACN,KAAK,GAAGC,SAAS,CAACC,WAAW;UACnC;QACJ,KAAK,KAAK;UACNI,KAAK,CAACN,KAAK,GAAGC,SAAS,CAACC,WAAW;UACnCI,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACU,MAAM,CAC3BC,UAAU,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAC5C;UACD;QACJ,KAAK,cAAc;UACfN,KAAK,CAACN,KAAK,GAAGC,SAAS,CAACC,WAAW;UACnCI,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACU,MAAM,CAC3BC,UAAU,IAAKA,UAAU,CAACE,SAAS,KAAK,IAAI,CAChD;UACD;QACJ,KAAK,UAAU;UACX,IAAIC,OAAa,GAAG,IAAIC,IAAI;UAC5B,MAAMC,WAAW,GAAGF,OAAO,CAACG,QAAQ,EAAE;UACtCX,KAAK,CAACN,KAAK,GAAGC,SAAS,CAACC,WAAW;UACnCI,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACU,MAAM,CAC3BC,UAAU,IAAKA,UAAU,CAACO,QAAQ,IAAIF,WAAW,IAAIL,UAAU,CAACQ,SAAS,GAAGH,WAAW,CAC3F;UACD;QACJ,KAAK,kBAAkB;UACnBV,KAAK,CAACN,KAAK,GAAGC,SAAS,CAACC,WAAW;UACnCI,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACU,MAAM,CAC3BC,UAAU,IAAKA,UAAU,CAACS,MAAM,IAAId,KAAK,CAACH,aAAa,CAC3D;UACD;QACJ;UACIG,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK;MAAC;IAEtC;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEK;AAAkB,CAAC,GAAGR,gBAAgB,CAACwB,OAAO;AAC7D,eAAexB,gBAAgB,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}