{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  loading: false,\n  error: null,\n  data: null\n};\nconst fetchUser = createAsyncThunk(\"user/login\", () => {\n  axios.post('http://localhost:8000/users/login');\n});\nconst userSlice = createSlice({\n  name: 'user'\n});\n\n// import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n// import IUser from \"../../types/interfaces/IUser\";\n// import axios from \"axios\";\n\n// export interface Credentials {\n//     email: string,\n//     password: string\n// }\n\n// export interface UserState {\n//     data: IUser | null\n// }\n// interface IinitialState {\n//     loading: boolean,\n//     success: boolean,\n//     userInfo: IUser | null,\n//     error: null | string | undefined,\n// }\n// export const logInUser = createAsyncThunk(\n//     \"users/login\",\n//     async (credentials: Credentials, thunkAPI) => {\n//         try {\n//             const response = await axios.post(\"http://localhost:8000/users/login\", credentials);\n//             return response.data as IUser;\n//         }\n//         catch (err: any) {\n//             return thunkAPI.rejectWithValue(err)\n//         }\n//     });\n\n// const initialState: IinitialState = {\n//     loading: false,\n//     userInfo: null,\n//     error: null,\n//     success: false,\n// }\n\n// export const userSlice=createSlice({\n//     name: 'user',\n//     initialState,\n//     reducers: {},\n//     extraReducers(builder) {\n//         builder\n//             .addCase(logInUser.pending, (state, action) => {\n//                 state.loading = true;\n//             })\n//             .addCase(logInUser.fulfilled, (state, action: PayloadAction<IUser>) => {\n//                 state.loading = false;\n//                 state.success = true;\n//                 state.userInfo = action.payload;\n//             })\n//             .addCase(logInUser.rejected, (state, action) => {\n//                 state.loading = false;\n//                 state.error = action.error.message;\n//             })\n//     }\n// });\n\n// export default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","loading","error","data","fetchUser","post","userSlice","name"],"sources":["/Users/matar.jacob/Desktop/FullStack Moveo Course/epicure/epicure/front/src/store/slices/userSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport IUser from \"../../types/interfaces/IUser\";\n\ninterface IUserState{\n    loading: boolean,\n    error: null | string,\n    data: IUser | null\n}\n\nconst initialState:IUserState = {\n    loading: false,\n    error: null,\n    data: null\n}\n\nconst fetchUser = createAsyncThunk(\"user/login\", ()=>{\n    axios.post('http://localhost:8000/users/login')\n})\n\nconst userSlice = createSlice({\n    name: 'user',\n\n})\n\n// import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n// import IUser from \"../../types/interfaces/IUser\";\n// import axios from \"axios\";\n\n// export interface Credentials {\n//     email: string,\n//     password: string\n// }\n\n// export interface UserState {\n//     data: IUser | null\n// }\n// interface IinitialState {\n//     loading: boolean,\n//     success: boolean,\n//     userInfo: IUser | null,\n//     error: null | string | undefined,\n// }\n// export const logInUser = createAsyncThunk(\n//     \"users/login\",\n//     async (credentials: Credentials, thunkAPI) => {\n//         try {\n//             const response = await axios.post(\"http://localhost:8000/users/login\", credentials);\n//             return response.data as IUser;\n//         }\n//         catch (err: any) {\n//             return thunkAPI.rejectWithValue(err)\n//         }\n//     });\n\n\n// const initialState: IinitialState = {\n//     loading: false,\n//     userInfo: null,\n//     error: null,\n//     success: false,\n// }\n\n// export const userSlice=createSlice({\n//     name: 'user',\n//     initialState,\n//     reducers: {},\n//     extraReducers(builder) {\n//         builder\n//             .addCase(logInUser.pending, (state, action) => {\n//                 state.loading = true;\n//             })\n//             .addCase(logInUser.fulfilled, (state, action: PayloadAction<IUser>) => {\n//                 state.loading = false;\n//                 state.success = true;\n//                 state.userInfo = action.payload;\n//             })\n//             .addCase(logInUser.rejected, (state, action) => {\n//                 state.loading = false;\n//                 state.error = action.error.message;\n//             })\n//     }\n// });\n\n// export default userSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AASzB,MAAMC,YAAuB,GAAG;EAC5BC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE;AACV,CAAC;AAED,MAAMC,SAAS,GAAGN,gBAAgB,CAAC,YAAY,EAAE,MAAI;EACjDC,KAAK,CAACM,IAAI,CAAC,mCAAmC,CAAC;AACnD,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGT,WAAW,CAAC;EAC1BU,IAAI,EAAE;AAEV,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}