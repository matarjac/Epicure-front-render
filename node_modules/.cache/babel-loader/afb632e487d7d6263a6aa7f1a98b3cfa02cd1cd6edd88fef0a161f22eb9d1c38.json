{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\n// import finalData from \"../../dataFinal.json\"\n\n// fetch\nconst allRestaurants = async () => {\n  const finalData = await axios.get('http://localhost:8000/restaurants');\n  console.log(finalData.data);\n};\nconst finalData = allRestaurants();\nconsole.log(finalData);\nexport const restaurantsSlice = createSlice({\n  name: \"restaurants\",\n  initialState: {\n    value: finalData,\n    chefOfTheWeek: 3\n  },\n  reducers: {\n    filterRestaurants: (state, action) => {\n      const filterType = action.payload;\n      switch (filterType) {\n        case \"all\":\n          state.value = finalData;\n          break;\n        case \"new\":\n          state.value = finalData;\n          state.value = state.value.filter(restaurant => restaurant.isNew === true);\n          break;\n        case \"most popular\":\n          state.value = finalData;\n          state.value = state.value.filter(restaurant => restaurant.isPopular === true);\n          break;\n        case \"open now\":\n          let timeNow = new Date();\n          const currentHour = timeNow.getHours();\n          state.value = finalData;\n          state.value = state.value.filter(restaurant => restaurant.openHour <= currentHour && restaurant.closeHour > currentHour);\n          break;\n        case \"chef of the week\":\n          state.value = finalData;\n          state.value = state.value.filter(restaurant => restaurant.chefID == state.chefOfTheWeek);\n          break;\n        default:\n          state.value = state.value;\n      }\n    }\n  }\n});\nexport const {\n  filterRestaurants\n} = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;","map":{"version":3,"names":["createSlice","axios","allRestaurants","finalData","get","console","log","data","restaurantsSlice","name","initialState","value","chefOfTheWeek","reducers","filterRestaurants","state","action","filterType","payload","filter","restaurant","isNew","isPopular","timeNow","Date","currentHour","getHours","openHour","closeHour","chefID","actions","reducer"],"sources":["/Users/matar.jacob/Desktop/FullStack Moveo Course/epicure/epicure/front/src/store/slices/restaurantsSlice.tsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios, { all } from 'axios';\nimport IRestaurantCard from \"../../types/interfaces/IRestaurantCard\";\n// import finalData from \"../../dataFinal.json\"\n\n// fetch\nconst allRestaurants = async () => {\n    const finalData = await axios.get('http://localhost:8000/restaurants');\n    console.log(finalData.data);\n}\n\nconst finalData = allRestaurants();\nconsole.log(finalData);\n\nexport const restaurantsSlice = createSlice({\n    name: \"restaurants\",\n    initialState: {\n        value: finalData,\n        chefOfTheWeek: 3\n    },\n    reducers: {\n        filterRestaurants: (state, action) => {\n            const filterType = action.payload;\n            switch (filterType) {\n                case \"all\":\n                    state.value = finalData;\n                    break;\n                case \"new\":\n                    state.value = finalData;\n                    state.value = state.value.filter(\n                        (restaurant: IRestaurantCard) => restaurant.isNew === true\n                    );\n                    break;\n                case \"most popular\":\n                    state.value = finalData;\n                    state.value = state.value.filter(\n                        (restaurant: IRestaurantCard) => restaurant.isPopular === true\n                    );\n                    break;\n                case \"open now\":\n                    let timeNow: Date = new Date;\n                    const currentHour = timeNow.getHours();\n                    state.value = finalData;\n                    state.value = state.value.filter(\n                        (restaurant: IRestaurantCard) => restaurant.openHour <= currentHour && restaurant.closeHour > currentHour\n                    );\n                    break;\n                case \"chef of the week\":\n                    state.value = finalData;\n                    state.value = state.value.filter(\n                        (restaurant: IRestaurantCard) => restaurant.chefID == state.chefOfTheWeek\n                    );\n                    break;\n                default:\n                    state.value = state.value;\n            }\n        }\n\n    }\n});\n\nexport const { filterRestaurants } = restaurantsSlice.actions;\nexport default restaurantsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAe,OAAO;AAElC;;AAEA;AACA,MAAMC,cAAc,GAAG,YAAY;EAC/B,MAAMC,SAAS,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,mCAAmC,CAAC;EACtEC,OAAO,CAACC,GAAG,CAACH,SAAS,CAACI,IAAI,CAAC;AAC/B,CAAC;AAED,MAAMJ,SAAS,GAAGD,cAAc,EAAE;AAClCG,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;AAEtB,OAAO,MAAMK,gBAAgB,GAAGR,WAAW,CAAC;EACxCS,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACVC,KAAK,EAAER,SAAS;IAChBS,aAAa,EAAE;EACnB,CAAC;EACDC,QAAQ,EAAE;IACNC,iBAAiB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClC,MAAMC,UAAU,GAAGD,MAAM,CAACE,OAAO;MACjC,QAAQD,UAAU;QACd,KAAK,KAAK;UACNF,KAAK,CAACJ,KAAK,GAAGR,SAAS;UACvB;QACJ,KAAK,KAAK;UACNY,KAAK,CAACJ,KAAK,GAAGR,SAAS;UACvBY,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAC3BC,UAA2B,IAAKA,UAAU,CAACC,KAAK,KAAK,IAAI,CAC7D;UACD;QACJ,KAAK,cAAc;UACfN,KAAK,CAACJ,KAAK,GAAGR,SAAS;UACvBY,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAC3BC,UAA2B,IAAKA,UAAU,CAACE,SAAS,KAAK,IAAI,CACjE;UACD;QACJ,KAAK,UAAU;UACX,IAAIC,OAAa,GAAG,IAAIC,IAAI;UAC5B,MAAMC,WAAW,GAAGF,OAAO,CAACG,QAAQ,EAAE;UACtCX,KAAK,CAACJ,KAAK,GAAGR,SAAS;UACvBY,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAC3BC,UAA2B,IAAKA,UAAU,CAACO,QAAQ,IAAIF,WAAW,IAAIL,UAAU,CAACQ,SAAS,GAAGH,WAAW,CAC5G;UACD;QACJ,KAAK,kBAAkB;UACnBV,KAAK,CAACJ,KAAK,GAAGR,SAAS;UACvBY,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACQ,MAAM,CAC3BC,UAA2B,IAAKA,UAAU,CAACS,MAAM,IAAId,KAAK,CAACH,aAAa,CAC5E;UACD;QACJ;UACIG,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK;MAAC;IAEtC;EAEJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG;AAAkB,CAAC,GAAGN,gBAAgB,CAACsB,OAAO;AAC7D,eAAetB,gBAAgB,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}